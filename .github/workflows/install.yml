name: install

# 触发工作流的条件
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"  # 匹配v数字.数字.数字及其后缀，如v1.2.3-alpha
    branches:
      - "**"  # 当推送到任意分支时触发
    paths:    # 只有这些文件改动时才触发
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  pull_request:
    branches:
      - "**"  # PR提交到任意分支时触发
    paths:    # 只有这些文件改动时才触发
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          # 检查是否是符合格式的发布标签
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            is_release=true
            tag=${GITHUB_REF#refs/tags/}
          else
            is_release=false
            # 获取最新的发布标签
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ ! $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi
          is_prerelease=false
          if [[ $tag =~ .*alpha.* || $tag =~ .*beta.* || $tag =~ .*rc.* || $tag =~ .*dev.* || $tag =~ .*-ci.* ]]; then
            is_prerelease=true
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
          echo is_prerelease=$is_prerelease | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}
      is_prerelease: ${{ steps.set_tag.outputs.is_prerelease }}

  windows:
    needs: meta
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86_64]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download MaaFramework
        uses: robinraju/release-downloader@v1
        with:
          repository: MaaXYZ/MaaFramework
          fileName: "MAA-win-${{ matrix.arch }}*"
          latest: true
          preRelease: true
          out-file-path: "deps"
          extract: true

      - name: Download MFAAvalonia  
        id: download_mfa
        uses: robinraju/release-downloader@v1  
        with:
          repository: SweetSmellFox/MFAAvalonia
          fileName: "MFAAvalonia-*-win-x64*"
          latest: true
          out-file-path: "MFA"
          extract: true

      - name: Clean up MFAAvalonia archive
        if: steps.download_mfa.outputs.downloaded_files != ''
        shell: bash
        run: |
          ARCHIVE_FILE="${{ fromJson(steps.download_mfa.outputs.downloaded_files)[0] }}"
          echo "Removing archive file: $ARCHIVE_FILE"
          rm -f "$ARCHIVE_FILE"

      - name: Setup Embed Python
        shell: powershell
        run: |
          ./tools/ci/setup_embed_python.ps1

      - name: Install
        shell: bash
        run: |
          python ./tools/install.py ${{ needs.meta.outputs.tag }}

          if [ -d "MFA" ]; then
            echo "Copying MFA files to install directory..."
            mkdir -p install
            cp -rpvn MFA/. install/
          else
            echo "MFA directory not found, skipping copy."
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: MWA-win-${{ matrix.arch }}
          path: "install"

  unix:
    needs: meta
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download MaaFramework
        uses: robinraju/release-downloader@v1
        with:
          repository: MaaXYZ/MaaFramework
          fileName: "MAA-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'macos' }}-${{ matrix.arch }}*"
          latest: true
          preRelease: true
          out-file-path: "deps"
          extract: true

      - name: Download MFAAvalonia  
        id: download_mfa 
        uses: robinraju/release-downloader@v1  
        with:
          repository: SweetSmellFox/MFAAvalonia
          fileName: "MFAAvalonia-*-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'osx' }}-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}*"
          latest: true
          out-file-path: "MFA"
          extract: true

      - name: Clean up MFAAvalonia archive 
        if: steps.download_mfa.outputs.downloaded_files != ''
        shell: bash
        run: |
          ARCHIVE_FILE="${{ fromJson(steps.download_mfa.outputs.downloaded_files)[0] }}"
          echo "Removing archive file: $ARCHIVE_FILE"
          rm -f "$ARCHIVE_FILE"

      - name: Install
        shell: bash
        run: |
          python ./tools/install.py ${{ needs.meta.outputs.tag }}


          if [ -d "MFA" ]; then
            echo "Copying MFA files to install directory..."
            mkdir -p install
            rsync -av --ignore-existing MFA/ install/
          else
            echo "MFA directory not found, skipping copy."
          fi
          

      - uses: actions/upload-artifact@v4
        with:
          name: MWA-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'macos' }}-${{ matrix.arch }}
          path: "install"


  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    needs: [meta, windows, unix]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: assets

      - name: Check assets directory
        run: |
          ls -la assets
          if [ -z "$(ls -A assets)" ]; then
            echo "assets directory is empty"
            exit 1
          fi

      - name: Compress and generate checksums
        run: |
          cd assets
          echo "Generating checksums for all zip files..."
          checksum_file="checksums.sha256"
          touch "$checksum_file"

          for f in *; do
            if [ -d "$f" ]; then
              echo "Processing directory: $f"
              zip_file="$f-${{ needs.meta.outputs.tag }}.zip"
              (cd "$f" && zip -r "../$zip_file" .)
              if [ $? -eq 0 ]; then
                echo "ZIP file created: ../$zip_file"
                echo "Processing directory: $f"
                sha256sum "$zip_file" >> "$checksum_file"
                echo "" >> "$checksum_file"
              else
                echo "Failed to create ZIP file: ../$zip_file"
                exit 1
              fi
            else
              echo "Skipping non-directory: $f"
            fi
          done

      - uses: softprops/action-gh-release@v2
        with:
          files: assets/*
          tag_name: ${{ needs.meta.outputs.tag }}
          
          draft: false
          prerelease: ${{ needs.meta.outputs.is_prerelease == 'true' }}
